# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022, Tigase, Inc
# This file is distributed under the same license as the TigaseDoc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: TigaseDoc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-27 12:30-0700\n"
"PO-Revision-Date: 2022-09-07 17:14+0000\n"
"Last-Translator: Qian Luo <qian.luo@tigase.net>\n"
"Language-Team: Chinese (Simplified) <http://translate.tigase.net/projects/"
"tigase-xmpp-server/dg-tests/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.11.2\n"
"Generated-By: Babel 2.8.0\n"

#: ../../Tigase_Development/Tests.rst:2 ../../Tigase_Development/Tests.rst:5
msgid "Tests"
msgstr "测试"

#: ../../Tigase_Development/Tests.rst:7
msgid "Tests are very important part of Tigase server development process."
msgstr "测试是Tigase服务器开发过程中非常重要的一部分。"

#: ../../Tigase_Development/Tests.rst:9
msgid ""
"Each release goes through fully automated testing process. All server "
"functions are considered implemented only when they pass the testing "
"cycle. Tigase test suite is used for all our automatic tests which allows"
" to define different test scenarios."
msgstr ""
"每个版本都经过完全自动化的测试过程。所有服务器功能仅在通过测试周期时才被视为"
"已实现。 Tigase测试套件用于我们所有的自动测试，允许定义不同的测试场景。"

#: ../../Tigase_Development/Tests.rst:11
msgid ""
"There is no tweaking on databases for tests. All databases are installed "
"in a standard way and run with default settings. Databases are cleared "
"each time before the test cycle starts."
msgstr "没有调整用于测试的数据库。所有数据库都以标准方式安装并使用默认设置运行。每次"
"测试周期开始前都会清除数据库。"

#: ../../Tigase_Development/Tests.rst:13
msgid ""
"There are no modifications needed to be made to Tigase’s configuration "
"file as well. All tests are performed on a default configuration "
"generated by the configuration wizards."
msgstr "也不需要对Tigase的配置文件进行修改。所有测试均在配置向导生成的默认配置上执行"
"。"

#: ../../Tigase_Development/Tests.rst:15
msgid "The server is tested in all supported environments:"
msgstr "该服务器在所有支持的环境中进行了测试："

#: ../../Tigase_Development/Tests.rst:17
msgid ""
"**XMLDB** - tests with built-in simple XML database. This is a simple and"
" efficient solution for small installations. It is recommended for "
"services with up to 100 user accounts although it has been successfully "
"tested with 10,000 user accounts."
msgstr ""
"**XMLDB** - "
"使用内置的简单XML数据库进行测试。对于小型安装，这是一种简单而有效的解决方案。"
"尽管它已经成功测试了 10,000 "
"个用户帐户，但建议用于具有多达100个用户帐户的服务。"

#: ../../Tigase_Development/Tests.rst:19
msgid ""
"**MySQL** - tests with a `MySQL <http://www.mysql.com/>`__ database. Much"
" slower than XMLDB but may handle many more user accounts."
msgstr ""
"**MySQL** - 使用 `MySQL <http://www.mysql.com/>`__ 数据库进行测试。比 XMLDB "
"慢得多，但可以处理更多的用户帐户。"

#: ../../Tigase_Development/Tests.rst:21
msgid ""
"**PostgreSQL** - tests with a `PostgreSQL <http://www.postgresql.org/>`__"
" database. Again it is much slower than XMLDB but may handle much more "
"user accounts. This is basically exactly the same code as for MySQL "
"database (SQL Connector) but tests are executed to make sure the code is "
"compatible with all supported SQL databases and to compare performance."
msgstr ""
"**PostgreSQL** - 使用 `PostgreSQL <http://www.postgresql.org/>`__ 数据库进行"
"测试。同样，它比XMLDB慢得多，但可以处理更多的用户帐户。这与MySQL数据库（SQL连"
"接器）的代码基本完全相同，但会执行测试以确保代码与所有支持的SQL数据库兼容并比"
"较性能。"

#: ../../Tigase_Development/Tests.rst:23
msgid ""
"**Distributed** - is a test for distributed installation where c2s and "
"s2s components run on separated machine which connects using external an "
"component protocol (`XEP-0114 "
"<http://www.xmpp.org/extensions/xep-0114.html>`__) to another machine "
"with SessionManager running."
msgstr ""
"**Distributed** - 是分布式安装的测试，其中c2s和s2s组件在分离的机器上运行，"
"该机器使用外部组件协议 (`XEP-0114 <http://www.xmpp.org/extensions/xep-0114."
"html>`__) 连接到另一台运行SessionManager的机器。"

#: ../../Tigase_Development/Tests.rst:27
msgid "Functional Tests"
msgstr "功能测试"

#: ../../Tigase_Development/Tests.rst:29
msgid ""
"Basic checking to see if all the functions work at correctly. These tests"
" are performed every time the code is sent to source repository."
msgstr "基本检查以查看所有功能是否正常工作。每次将代码发送到源存储库时都会执行这些测"
"试。"

#: ../../Tigase_Development/Tests.rst:32 ../../Tigase_Development/Tests.rst:73
#: ../../Tigase_Development/Tests.rst:114
msgid "Version"
msgstr "版本"

#: ../../Tigase_Development/Tests.rst:32 ../../Tigase_Development/Tests.rst:73
#: ../../Tigase_Development/Tests.rst:114
msgid "XMLDB"
msgstr "XMLDB"

#: ../../Tigase_Development/Tests.rst:32 ../../Tigase_Development/Tests.rst:73
#: ../../Tigase_Development/Tests.rst:114
msgid "MySQL"
msgstr "MySQL"

#: ../../Tigase_Development/Tests.rst:32 ../../Tigase_Development/Tests.rst:73
#: ../../Tigase_Development/Tests.rst:114
msgid "PGSQL"
msgstr "PGSQL"

#: ../../Tigase_Development/Tests.rst:32 ../../Tigase_Development/Tests.rst:73
#: ../../Tigase_Development/Tests.rst:114
msgid "Distributed"
msgstr "发布"

#: ../../Tigase_Development/Tests.rst:34 ../../Tigase_Development/Tests.rst:75
msgid "3.3.2-b889"
msgstr "3.3.2-b889"

#: ../../Tigase_Development/Tests.rst:34
msgid "`00:00:12 <tests/3.3.2-b889/func/xmldb/functional-tests.html>`__"
msgstr "`00:00:12 <tests/3.3.2-b889/func/xmldb/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:34
msgid "`00:00:17 <tests/3.3.2-b889/func/mysql/functional-tests.html>`__"
msgstr "`00:00:17 <tests/3.3.2-b889/func/mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:34
msgid "`00:00:17 <tests/3.3.2-b889/func/pgsql/functional-tests.html>`__"
msgstr "`00:00:17 <tests/3.3.2-b889/func/pgsql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:34 ../../Tigase_Development/Tests.rst:75
msgid "none"
msgstr "无"

#: ../../Tigase_Development/Tests.rst:36 ../../Tigase_Development/Tests.rst:77
msgid "3.3.2-b880"
msgstr "3.3.2-b880"

#: ../../Tigase_Development/Tests.rst:36
msgid "`00:00:13 <tests/3.3.2-b880/func/xmldb/functional-tests.html>`__"
msgstr "`00:00:13 <tests/3.3.2-b880/func/xmldb/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:36
msgid "`00:00:15 <tests/3.3.2-b880/func/mysql/functional-tests.html>`__"
msgstr "`00:00:15 <tests/3.3.2-b880/func/mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:36
msgid "`00:00:15 <tests/3.3.2-b880/func/pgsql/functional-tests.html>`__"
msgstr "`00:00:15 <tests/3.3.2-b880/func/pgsql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:36 ../../Tigase_Development/Tests.rst:64
#: ../../Tigase_Development/Tests.rst:77 ../../Tigase_Development/Tests.rst:105
#: ../../Tigase_Development/Tests.rst:116
msgid "None"
msgstr "无"

#: ../../Tigase_Development/Tests.rst:38 ../../Tigase_Development/Tests.rst:79
msgid "3.0.2-b700"
msgstr "3.0.2-b700"

#: ../../Tigase_Development/Tests.rst:38
msgid "`00:00:22 <tests/3.0.2-b700/func/xmldb/functional-tests.html>`__"
msgstr "`00:00:22 <tests/3.0.2-b700/func/xmldb/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:38
msgid "`00:00:24 <tests/3.0.2-b700/func/mysql/functional-tests.html>`__"
msgstr "`00:00:24 <tests/3.0.2-b700/func/mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:38
msgid "`00:00:25 <tests/3.0.2-b700/func/pgsql/functional-tests.html>`__"
msgstr "`00:00:25 <tests/3.0.2-b700/func/pgsql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:38
msgid "`00:00:25 <tests/3.0.2-b700/func/sm-mysql/functional-tests.html>`__"
msgstr "`00:00:25 <tests/3.0.2-b700/func/sm-mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:40 ../../Tigase_Development/Tests.rst:81
msgid "2.9.5-b606"
msgstr "2.9.5-b606"

#: ../../Tigase_Development/Tests.rst:40
msgid "`00:00:22 <tests/2.9.5-b606/func/xmldb/functional-tests.html>`__"
msgstr "`00:00:22 <tests/2.9.5-b606/func/xmldb/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:40
msgid "`00:00:24 <tests/2.9.5-b606/func/mysql/functional-tests.html>`__"
msgstr "`00:00:24 <tests/2.9.5-b606/func/mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:40
msgid "`00:00:24 <tests/2.9.5-b606/func/pgsql/functional-tests.html>`__"
msgstr "`00:00:24 <tests/2.9.5-b606/func/pgsql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:40
msgid "`00:00:24 <tests/2.9.5-b606/func/sm-mysql/functional-tests.html>`__"
msgstr "`00:00:24 <tests/2.9.5-b606/func/sm-mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:42 ../../Tigase_Development/Tests.rst:83
msgid "2.9.3-b548"
msgstr "2.9.3-b548"

#: ../../Tigase_Development/Tests.rst:42
msgid "`00:00:22 <tests/2.9.3-b548/func/xmldb/functional-tests.html>`__"
msgstr "`00:00:22 <tests/2.9.3-b548/func/xmldb/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:42
msgid "`00:00:23 <tests/2.9.3-b548/func/mysql/functional-tests.html>`__"
msgstr "`00:00:23 <tests/2.9.3-b548/func/mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:42
msgid "`00:00:25 <tests/2.9.3-b548/func/pgsql/functional-tests.html>`__"
msgstr "`00:00:25 <tests/2.9.3-b548/func/pgsql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:42
msgid "`00:00:25 <tests/2.9.3-b548/func/sm-mysql/functional-tests.html>`__"
msgstr "`00:00:25 <tests/2.9.3-b548/func/sm-mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:44 ../../Tigase_Development/Tests.rst:85
msgid "2.9.1-b528"
msgstr "2.9.1-b528"

#: ../../Tigase_Development/Tests.rst:44
msgid "`00:00:21 <tests/2.9.1-b528/func/xmldb/functional-tests.html>`__"
msgstr "`00:00:21 <tests/2.9.1-b528/func/xmldb/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:44
msgid "`00:00:23 <tests/2.9.1-b528/func/mysql/functional-tests.html>`__"
msgstr "`00:00:23 <tests/2.9.1-b528/func/mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:44
msgid "`00:00:24 <tests/2.9.1-b528/func/pgsql/functional-tests.html>`__"
msgstr "`00:00:24 <tests/2.9.1-b528/func/pgsql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:44
msgid "`00:00:25 <tests/2.9.1-b528/func/sm-mysql/functional-tests.html>`__"
msgstr "`00:00:25 <tests/2.9.1-b528/func/sm-mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:46 ../../Tigase_Development/Tests.rst:87
msgid "2.8.6-b434"
msgstr "2.8.6-b434"

#: ../../Tigase_Development/Tests.rst:46
msgid "`00:00:21 <tests/2.8.6-b434/func/xmldb/functional-tests.html>`__"
msgstr "`00:00:21 <tests/2.8.6-b434/func/xmldb/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:46
msgid "`00:00:24 <tests/2.8.6-b434/func/mysql/functional-tests.html>`__"
msgstr "`00:00:24 <tests/2.8.6-b434/func/mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:46
msgid "`00:00:24 <tests/2.8.6-b434/func/pgsql/functional-tests.html>`__"
msgstr "`00:00:24 <tests/2.8.6-b434/func/pgsql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:46
msgid "`00:00:25 <tests/2.8.6-b434/func/sm-mysql/functional-tests.html>`__"
msgstr "`00:00:25 <tests/2.8.6-b434/func/sm-mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:48 ../../Tigase_Development/Tests.rst:89
msgid "2.8.5-b422"
msgstr "2.8.5-b422"

#: ../../Tigase_Development/Tests.rst:48
msgid "`00:00:21 <tests/2.8.5-b422/func/xmldb/functional-tests.html>`__"
msgstr "`00:00:21 <tests/2.8.5-b422/func/xmldb/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:48
msgid "`00:00:24 <tests/2.8.5-b422/func/mysql/functional-tests.html>`__"
msgstr "`00:00:24 <tests/2.8.5-b422/func/mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:48
msgid "`00:00:24 <tests/2.8.5-b422/func/pgsql/functional-tests.html>`__"
msgstr "`00:00:24 <tests/2.8.5-b422/func/pgsql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:48
msgid "`00:00:26 <tests/2.8.5-b422/func/sm-mysql/functional-tests.html>`__"
msgstr "`00:00:26 <tests/2.8.5-b422/func/sm-mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:50 ../../Tigase_Development/Tests.rst:91
msgid "2.8.3-b409"
msgstr "2.8.3-b409"

#: ../../Tigase_Development/Tests.rst:50
msgid "`00:00:27 <tests/2.8.3-b409/func/xmldb/functional-tests.html>`__"
msgstr "`00:00:27 <tests/2.8.3-b409/func/xmldb/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:50
msgid "`00:00:29 <tests/2.8.3-b409/func/mysql/functional-tests.html>`__"
msgstr "`00:00:29 <tests/2.8.3-b409/func/mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:50
msgid "`00:00:29 <tests/2.8.3-b409/func/pgsql/functional-tests.html>`__"
msgstr "`00:00:29 <tests/2.8.3-b409/func/pgsql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:50
msgid "`00:00:32 <tests/2.8.3-b409/func/sm-mysql/functional-tests.html>`__"
msgstr "`00:00:32 <tests/2.8.3-b409/func/sm-mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:52 ../../Tigase_Development/Tests.rst:93
msgid "2.7.2-b378"
msgstr "2.7.2-b378"

#: ../../Tigase_Development/Tests.rst:52
msgid "`00:00:30 <tests/2.7.2-b378/func/xmldb/functional-tests.html>`__"
msgstr "`00:00:30 <tests/2.7.2-b378/func/xmldb/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:52
msgid "`00:00:34 <tests/2.7.2-b378/func/mysql/functional-tests.html>`__"
msgstr "`00:00:34 <tests/2.7.2-b378/func/mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:52
msgid "`00:00:33 <tests/2.7.2-b378/func/pgsql/functional-tests.html>`__"
msgstr "`00:00:33 <tests/2.7.2-b378/func/pgsql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:52
msgid "`00:00:35 <tests/2.7.2-b378/func/sm-mysql/functional-tests.html>`__"
msgstr "`00:00:35 <tests/2.7.2-b378/func/sm-mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:54 ../../Tigase_Development/Tests.rst:95
msgid "2.6.4-b300"
msgstr "2.6.4-b300"

#: ../../Tigase_Development/Tests.rst:54
msgid "`00:00:30 <tests/2.6.4-b300/func/xmldb/functional-tests.html>`__"
msgstr "`00:00:30 <tests/2.6.4-b300/func/xmldb/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:54
msgid "`00:00:32 <tests/2.6.4-b300/func/mysql/functional-tests.html>`__"
msgstr "`00:00:32 <tests/2.6.4-b300/func/mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:54
msgid "`00:00:35 <tests/2.6.4-b300/func/pgsql/functional-tests.html>`__"
msgstr "`00:00:35 <tests/2.6.4-b300/func/pgsql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:54
msgid "`00:00:39 <tests/2.6.4-b300/func/sm-mysql/functional-tests.html>`__"
msgstr "`00:00:39 <tests/2.6.4-b300/func/sm-mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:56 ../../Tigase_Development/Tests.rst:97
msgid "2.6.4-b295"
msgstr "2.6.4-b295"

#: ../../Tigase_Development/Tests.rst:56
msgid "`00:00:29 <tests/2.6.4-b295/func/xmldb/functional-tests.html>`__"
msgstr "`00:00:29 <tests/2.6.4-b295/func/xmldb/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:56
msgid "`00:00:32 <tests/2.6.4-b295/func/mysql/functional-tests.html>`__"
msgstr "`00:00:32 <tests/2.6.4-b295/func/mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:56
msgid "`00:00:45 <tests/2.6.4-b295/func/pgsql/functional-tests.html>`__"
msgstr "`00:00:45 <tests/2.6.4-b295/func/pgsql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:56
msgid "`00:00:36 <tests/2.6.4-b295/func/sm-mysql/functional-tests.html>`__"
msgstr "`00:00:36 <tests/2.6.4-b295/func/sm-mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:58 ../../Tigase_Development/Tests.rst:99
msgid "2.6.0-b287"
msgstr "2.6.0-b287"

#: ../../Tigase_Development/Tests.rst:58
msgid "`00:00:31 <tests/2.6.0-b287/func/xmldb/functional-tests.html>`__"
msgstr "`00:00:31 <tests/2.6.0-b287/func/xmldb/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:58
msgid "`00:00:34 <tests/2.6.0-b287/func/mysql/functional-tests.html>`__"
msgstr "`00:00:34 <tests/2.6.0-b287/func/mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:58
msgid "`00:00:47 <tests/2.6.0-b287/func/pgsql/functional-tests.html>`__"
msgstr "`00:00:47 <tests/2.6.0-b287/func/pgsql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:58
msgid "`00:00:43 <tests/2.6.0-b287/func/sm-mysql/functional-tests.html>`__"
msgstr "`00:00:43 <tests/2.6.0-b287/func/sm-mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:60 ../../Tigase_Development/Tests.rst:101
msgid "2.5.0-b279"
msgstr "2.5.0-b279"

#: ../../Tigase_Development/Tests.rst:60
msgid "`00:00:30 <tests/2.5.0-b279/func/xmldb/functional-tests.html>`__"
msgstr "`00:00:30 <tests/2.5.0-b279/func/xmldb/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:60
msgid "`00:00:34 <tests/2.5.0-b279/func/mysql/functional-tests.html>`__"
msgstr "`00:00:34 <tests/2.5.0-b279/func/mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:60
msgid "`00:00:45 <tests/2.5.0-b279/func/pgsql/functional-tests.html>`__"
msgstr "`00:00:45 <tests/2.5.0-b279/func/pgsql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:60
msgid "`00:00:43 <tests/2.5.0-b279/func/sm-mysql/functional-tests.html>`__"
msgstr "`00:00:43 <tests/2.5.0-b279/func/sm-mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:62 ../../Tigase_Development/Tests.rst:103
msgid "2.4.0-b263"
msgstr "2.4.0-b263"

#: ../../Tigase_Development/Tests.rst:62
msgid "`00:00:29 <tests/2.4.0-b263/func/xmldb/functional-tests.html>`__"
msgstr "`00:00:29 <tests/2.4.0-b263/func/xmldb/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:62
msgid "`00:00:33 <tests/2.4.0-b263/func/mysql/functional-tests.html>`__"
msgstr "`00:00:33 <tests/2.4.0-b263/func/mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:62
msgid "`00:00:45 <tests/2.4.0-b263/func/pgsql/functional-tests.html>`__"
msgstr "`00:00:45 <tests/2.4.0-b263/func/pgsql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:62
msgid "`00:00:44 <tests/2.4.0-b263/func/sm-mysql/functional-tests.html>`__"
msgstr "`00:00:44 <tests/2.4.0-b263/func/sm-mysql/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:64 ../../Tigase_Development/Tests.rst:105
#: ../../Tigase_Development/Tests.rst:116
msgid "2.3.4-b226"
msgstr "2.3.4-b226"

#: ../../Tigase_Development/Tests.rst:64
msgid "`00:00:48 <tests/functional-tests.html>`__"
msgstr "`00:00:48 <tests/functional-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:68
msgid "Performance Tests"
msgstr "性能测试"

#: ../../Tigase_Development/Tests.rst:70
msgid "Checking to see whether the function performs well enough."
msgstr "检查函数是否执行得足够好。"

#: ../../Tigase_Development/Tests.rst:75
msgid "`00:12:17 <tests/3.3.2-b889/perf/xmldb/performance-tests.html>`__"
msgstr "`00:12:17 <tests/3.3.2-b889/perf/xmldb/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:75
msgid "`00:13:42 <tests/3.3.2-b889/perf/mysql/performance-tests.html>`__"
msgstr "`00:13:42 <tests/3.3.2-b889/perf/mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:75
msgid "`00:17:10 <tests/3.3.2-b889/perf/pgsql/performance-tests.html>`__"
msgstr "`00:17:10 <tests/3.3.2-b889/perf/pgsql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:77
msgid "`00:13:39 <tests/3.3.2-b880/perf/xmldb/performance-tests.html>`__"
msgstr "`00:13:39 <tests/3.3.2-b880/perf/xmldb/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:77
msgid "`00:14:09 <tests/3.3.2-b880/perf/mysql/performance-tests.html>`__"
msgstr "`00:14:09 <tests/3.3.2-b880/perf/mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:77
msgid "`00:17:39 <tests/3.3.2-b880/perf/pgsql/performance-tests.html>`__"
msgstr "`00:17:39 <tests/3.3.2-b880/perf/pgsql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:79
msgid "`00:10:26 <tests/3.0.2-b700/perf/xmldb/performance-tests.html>`__"
msgstr "`00:10:26 <tests/3.0.2-b700/perf/xmldb/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:79
msgid "`00:11:00 <tests/3.0.2-b700/perf/mysql/performance-tests.html>`__"
msgstr "`00:11:00 <tests/3.0.2-b700/perf/mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:79
msgid "`00:12:08 <tests/3.0.2-b700/perf/pgsql/performance-tests.html>`__"
msgstr "`00:12:08 <tests/3.0.2-b700/perf/pgsql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:79
msgid "`00:24:05 <tests/3.0.2-b700/perf/sm-mysql/performance-tests.html>`__"
msgstr "`00:24:05 <tests/3.0.2-b700/perf/sm-mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:81
msgid "`00:09:54 <tests/2.9.5-b606/perf/xmldb/performance-tests.html>`__"
msgstr "`00:09:54 <tests/2.9.5-b606/perf/xmldb/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:81
msgid "`00:11:18 <tests/2.9.5-b606/perf/mysql/performance-tests.html>`__"
msgstr "`00:11:18 <tests/2.9.5-b606/perf/mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:81
msgid "`00:37:08 <tests/2.9.5-b606/perf/pgsql/performance-tests.html>`__"
msgstr "`00:37:08 <tests/2.9.5-b606/perf/pgsql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:81
msgid "`00:16:20 <tests/2.9.5-b606/perf/sm-mysql/performance-tests.html>`__"
msgstr "`00:16:20 <tests/2.9.5-b606/perf/sm-mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:83
msgid "`00:10:00 <tests/2.9.3-b548/perf/xmldb/performance-tests.html>`__"
msgstr "`00:10:00 <tests/2.9.3-b548/perf/xmldb/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:83
msgid "`00:11:29 <tests/2.9.3-b548/perf/mysql/performance-tests.html>`__"
msgstr "`00:11:29 <tests/2.9.3-b548/perf/mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:83
msgid "`00:36:43 <tests/2.9.3-b548/perf/pgsql/performance-tests.html>`__"
msgstr "`00:36:43 <tests/2.9.3-b548/perf/pgsql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:83
msgid "`00:16:47 <tests/2.9.3-b548/perf/sm-mysql/performance-tests.html>`__"
msgstr "`00:16:47 <tests/2.9.3-b548/perf/sm-mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:85
msgid "`00:09:46 <tests/2.9.1-b528/perf/xmldb/performance-tests.html>`__"
msgstr "`00:09:46 <tests/2.9.1-b528/perf/xmldb/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:85
msgid "`00:11:15 <tests/2.9.1-b528/perf/mysql/performance-tests.html>`__"
msgstr "`00:11:15 <tests/2.9.1-b528/perf/mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:85
msgid "`00:36:12 <tests/2.9.1-b528/perf/pgsql/performance-tests.html>`__"
msgstr "`00:36:12 <tests/2.9.1-b528/perf/pgsql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:85
msgid "`00:16:36 <tests/2.9.1-b528/perf/sm-mysql/performance-tests.html>`__"
msgstr "`00:16:36 <tests/2.9.1-b528/perf/sm-mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:87
msgid "`00:10:02 <tests/2.8.6-b434/perf/xmldb/performance-tests.html>`__"
msgstr "`00:10:02 <tests/2.8.6-b434/perf/xmldb/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:87
msgid "`00:11:45 <tests/2.8.6-b434/perf/mysql/performance-tests.html>`__"
msgstr "`00:11:45 <tests/2.8.6-b434/perf/mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:87
msgid "`00:36:36 <tests/2.8.6-b434/perf/pgsql/performance-tests.html>`__"
msgstr "`00:36:36 <tests/2.8.6-b434/perf/pgsql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:87
msgid "`00:17:36 <tests/2.8.6-b434/perf/sm-mysql/performance-tests.html>`__"
msgstr "`00:17:36 <tests/2.8.6-b434/perf/sm-mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:89
msgid "`00:12:37 <tests/2.8.5-b422/perf/xmldb/performance-tests.html>`__"
msgstr "`00:12:37 <tests/2.8.5-b422/perf/xmldb/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:89
msgid "`00:14:40 <tests/2.8.5-b422/perf/mysql/performance-tests.html>`__"
msgstr "`00:14:40 <tests/2.8.5-b422/perf/mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:89
msgid "`00:38:59 <tests/2.8.5-b422/perf/pgsql/performance-tests.html>`__"
msgstr "`00:38:59 <tests/2.8.5-b422/perf/pgsql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:89
msgid "`00:21:40 <tests/2.8.5-b422/perf/sm-mysql/performance-tests.html>`__"
msgstr "`00:21:40 <tests/2.8.5-b422/perf/sm-mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:91
msgid "`00:12:32 <tests/2.8.3-b409/perf/xmldb/performance-tests.html>`__"
msgstr "`00:12:32 <tests/2.8.3-b409/perf/xmldb/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:91
msgid "`00:14:26 <tests/2.8.3-b409/perf/mysql/performance-tests.html>`__"
msgstr "`00:14:26 <tests/2.8.3-b409/perf/mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:91
msgid "`00:37:57 <tests/2.8.3-b409/perf/pgsql/performance-tests.html>`__"
msgstr "`00:37:57 <tests/2.8.3-b409/perf/pgsql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:91
msgid "`00:21:26 <tests/2.8.3-b409/perf/sm-mysql/performance-tests.html>`__"
msgstr "`00:21:26 <tests/2.8.3-b409/perf/sm-mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:93
msgid "`00:12:28 <tests/2.7.2-b378/perf/xmldb/performance-tests.html>`__"
msgstr "`00:12:28 <tests/2.7.2-b378/perf/xmldb/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:93
msgid "`00:14:57 <tests/2.7.2-b378/perf/mysql/performance-tests.html>`__"
msgstr "`00:14:57 <tests/2.7.2-b378/perf/mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:93
msgid "`00:37:09 <tests/2.7.2-b378/perf/pgsql/performance-tests.html>`__"
msgstr "`00:37:09 <tests/2.7.2-b378/perf/pgsql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:93
msgid "`00:22:20 <tests/2.7.2-b378/perf/sm-mysql/performance-tests.html>`__"
msgstr "`00:22:20 <tests/2.7.2-b378/perf/sm-mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:95
msgid "`00:12:46 <tests/2.6.4-b300/perf/xmldb/performance-tests.html>`__"
msgstr "`00:12:46 <tests/2.6.4-b300/perf/xmldb/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:95
msgid "`00:14:59 <tests/2.6.4-b300/perf/mysql/performance-tests.html>`__"
msgstr "`00:14:59 <tests/2.6.4-b300/perf/mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:95
msgid "`00:36:56 <tests/2.6.4-b300/perf/pgsql/performance-tests.html>`__"
msgstr "`00:36:56 <tests/2.6.4-b300/perf/pgsql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:95
msgid "`00:35:00 <tests/2.6.4-b300/perf/sm-mysql/performance-tests.html>`__"
msgstr "`00:35:00 <tests/2.6.4-b300/perf/sm-mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:97
msgid "`00:12:23 <tests/2.6.4-b295/perf/xmldb/performance-tests.html>`__"
msgstr "`00:12:23 <tests/2.6.4-b295/perf/xmldb/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:97
msgid "`00:14:59 <tests/2.6.4-b295/perf/mysql/performance-tests.html>`__"
msgstr "`00:14:59 <tests/2.6.4-b295/perf/mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:97
msgid "`00:42:24 <tests/2.6.4-b295/perf/pgsql/performance-tests.html>`__"
msgstr "`00:42:24 <tests/2.6.4-b295/perf/pgsql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:97
msgid "`00:30:18 <tests/2.6.4-b295/perf/sm-mysql/performance-tests.html>`__"
msgstr "`00:30:18 <tests/2.6.4-b295/perf/sm-mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:99
msgid "`00:13:50 <tests/2.6.0-b287/perf/xmldb/performance-tests.html>`__"
msgstr "`00:13:50 <tests/2.6.0-b287/perf/xmldb/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:99
msgid "`00:16:53 <tests/2.6.0-b287/perf/mysql/performance-tests.html>`__"
msgstr "`00:16:53 <tests/2.6.0-b287/perf/mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:99
msgid "`00:48:17 <tests/2.6.0-b287/perf/pgsql/performance-tests.html>`__"
msgstr "`00:48:17 <tests/2.6.0-b287/perf/pgsql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:99
msgid "`00:49:06 <tests/2.6.0-b287/perf/sm-mysql/performance-tests.html>`__"
msgstr "`00:49:06 <tests/2.6.0-b287/perf/sm-mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:101
msgid "`00:13:29 <tests/2.5.0-b279/perf/xmldb/performance-tests.html>`__"
msgstr "`00:13:29 <tests/2.5.0-b279/perf/xmldb/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:101
msgid "`00:16:58 <tests/2.5.0-b279/perf/mysql/performance-tests.html>`__"
msgstr "`00:16:58 <tests/2.5.0-b279/perf/mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:101
msgid "`00:47:15 <tests/2.5.0-b279/perf/pgsql/performance-tests.html>`__"
msgstr "`00:47:15 <tests/2.5.0-b279/perf/pgsql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:101
msgid "`00:41:52 <tests/2.5.0-b279/perf/sm-mysql/performance-tests.html>`__"
msgstr "`00:41:52 <tests/2.5.0-b279/perf/sm-mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:103
msgid "`00:13:20 <tests/2.4.0-b263/perf/xmldb/performance-tests.html>`__"
msgstr "`00:13:20 <tests/2.4.0-b263/perf/xmldb/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:103
msgid "`00:16:21 <tests/2.4.0-b263/perf/mysql/performance-tests.html>`__"
msgstr "`00:16:21 <tests/2.4.0-b263/perf/mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:103
msgid "`00:43:56 <tests/2.4.0-b263/perf/pgsql/performance-tests.html>`__"
msgstr "`00:43:56 <tests/2.4.0-b263/perf/pgsql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:103
msgid "`00:42:08 <tests/2.4.0-b263/perf/sm-mysql/performance-tests.html>`__"
msgstr "`00:42:08 <tests/2.4.0-b263/perf/sm-mysql/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:105
msgid "`01:23:30 <tests/performance-tests.html>`__"
msgstr "`01:23:30 <tests/performance-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:109
msgid "Stability Tests"
msgstr "稳定性测试"

#: ../../Tigase_Development/Tests.rst:111
msgid ""
"Checking to see whether the function behaves well in long term run. It "
"must handle hundreds of requests a second in a several hour server run."
msgstr "检查该功能在长期运行中是否表现良好。它必须在几个小时的服务器运行中每秒处理数"
"百个请求。"

#: ../../Tigase_Development/Tests.rst:116
msgid "`16:06:31 <tests/stability-tests.html>`__"
msgstr "`16:06:31 <tests/stability-tests.html>`__"

#: ../../Tigase_Development/Tests.rst:120
msgid "Tigase Test Suite"
msgstr "Tigase测试套件"

#: ../../Tigase_Development/Tests.rst:122
msgid ""
"Tigase Test Suite is an engine which allows you to run tests. Essentially"
" it just executes **TestCase** implementations. The tests may depend on "
"other tests which means they are executed in specific order. For example "
"authentication test is executed after the stream open test which in turn "
"is executed after network socket connection test."
msgstr ""
"Tigase Test Suite是一个允许您运行测试的引擎。本质上它只是执行 **TestCase** 实"
"现。测试可能依赖于其他测试，这意味着它们按特定顺序执行。例如，身份验证测试在"
"流打开测试之后执行，而流打开测试又在网络套接字连接测试之后执行。"

#: ../../Tigase_Development/Tests.rst:124
msgid ""
"Each **TestCase** implementation may have it’s own set of specific "
"parameters. There is a set of common parameters which may be applied to "
"any **TestCase**. As an example of the common parameter you can take "
"**-loop = 10** which specified that the **TestCase** must be executed 10 "
"times. The test specific parameter might be **-user-name = tester** which"
" may set the user name for authentication test."
msgstr ""
"每个 **TestCase** 实现都可能有自己的一组特定参数。"
"有一组通用参数可以应用于任何 **TestCase**。作为通用参数的示例，您可以使用 **-"
"loop = 10** 指定 **TestCase** 必须执行10次。测试特定参数可能是 **-user-name "
"= tester** ，它可以设置身份验证测试的用户名。"

#: ../../Tigase_Development/Tests.rst:126
msgid ""
"The engine is very generic and allows you to write any kind of tests but "
"for the Tigase projects the current TestCase implementations mimic an "
"XMPP client and are designed to test XMPP servers."
msgstr "该引擎非常通用，允许您编写任何类型的测试，但对于Tigase项目，当前的TestCase实"
"现模仿XMPP客户端，旨在测试XMPP 服务器。"

#: ../../Tigase_Development/Tests.rst:128
msgid ""
"The suite contains a kind of scripting language which allows you to "
"combine test cases into a test scenarios. The test scenario may contain "
"full set of functional tests for example, another test scenario may "
"contain performance tests and so on."
msgstr "该套件包含一种脚本语言，允许您将测试用例组合到测试场景中。测试场景可能包含全"
"套功能测试，比如，另一个测试场景可能包含性能测试等。"

#: ../../Tigase_Development/Tests.rst:131
msgid "Running Tigase Test Suite (TTS)"
msgstr "运行Tigase测试套件 (TTS)"

#: ../../Tigase_Development/Tests.rst:133
msgid "To obtain TTS, you will first need to clone the repository"
msgstr "要获取TTS，您首先需要克隆存储库"

#: ../../Tigase_Development/Tests.rst:139
msgid ""
"Once cloning is finished, navigate to the TTS root directory and compile "
"with maven:"
msgstr "克隆完成后，导航到TTS根目录并使用maven编译："

#: ../../Tigase_Development/Tests.rst:145
msgid ""
"Maven will compile TTS and place jars in the necessary locations. From "
"the same directory, you can begin running TTS using the following "
"command:"
msgstr "Maven将编译TTS并将jars放在必要的位置。在同一目录中，您可以使用以下命令开始运"
"行TTS："

#: ../../Tigase_Development/Tests.rst:151
msgid ""
"You should see the following, which outlines the possible options to "
"customize your test run"
msgstr "您应该看到以下内容，其中概述了自定义测试运行的可能选项"

#: ../../Tigase_Development/Tests.rst:193
msgid "Customizing Tigase Test Suite"
msgstr "自定义Tigase测试套件"

#: ../../Tigase_Development/Tests.rst:195
msgid ""
"You may run the tests from a command line like above, however you may "
"create and edit the /scripts/tests-runner-settings.sh file to fit your "
"Tigase installation and avoid having to have long complex commands as "
"this template shows:"
msgstr ""
"您可以像上面一样从命令行运行测试，但是您可以创建和编辑 /scripts/tests-runner-"
"settings.sh "
"文件以适应您的Tigase安装，并避免像此模板所示的那样使用冗长的复杂命令："

#: ../../Tigase_Development/Tests.rst:225
msgid ""
"This will allow you to maintain identical settings through multiple runs "
"of TTS. See the next section for learning how the scripting language "
"works and how you can create and run your own custom tests."
msgstr "这将允许您通过多次运行TTS来保持相同的设置。请参阅下一节以了解脚本语言的工作原"
"理以及如何创建和运行自己的自定义测试。"

#: ../../Tigase_Development/Tests.rst:228
msgid "Test Suite Scripting Language"
msgstr "测试套件脚本语言"

#: ../../Tigase_Development/Tests.rst:230
msgid ""
"The test suite contains scripting language which allows you to combine "
"test cases into a test scenarios. On the lowest level, however the "
"language is designed to allow you to describe the test by setting test "
"parameters, test comments, identification and so on."
msgstr "测试套件包含脚本语言，允许您将测试用例组合到测试场景中。然而，在最低级别上，"
"该语言旨在允许您通过设置测试参数、测试注释、标识等来描述测试。"

#: ../../Tigase_Development/Tests.rst:232
msgid "Let’s look at the example test description."
msgstr "让我们看一下示例测试描述。"

#: ../../Tigase_Development/Tests.rst:244
msgid "Meaning of all elements:"
msgstr "所有元素的含义："

#: ../../Tigase_Development/Tests.rst:246
msgid ""
"**Short name** is any descriptive name you want. It doesn’t need to be "
"unique, just something which tells you what this test is about. @ is a "
"separator between the short name and the test ids."
msgstr "**Short name** "
"是您想要的任何描述性名称。它不需要是唯一的，只是告诉你这个测试是关于什么的。@"
" 是短名称和测试ID之间的分隔符。"

#: ../../Tigase_Development/Tests.rst:248
msgid ""
"**test-id-1;test-id-2** is a semicolon separated of the test cases IDs. "
"The tests cases are executed in the listed order. And listing them there "
"means that the test-id-2 depends on test-id-1. Normally you don’t have to"
" list all the dependencies because all mandatory dependencies are "
"included automatically. Which means if you have an authentication test "
"case the suite adds the network socket connection and stream opening "
"tests automatically. Sometimes however, there are dependencies which are "
"optional or multiple mandatory dependencies and you need to select which "
"one has to be executed. As a good example is the authentications test "
"case. There are many authentication tests: PLAIN-AUTH, SASL-DIGESTMD5, "
"SASL-PLAIN, DIGEST-AUTH and they are all mandatory for most of other "
"tests like roster, presence and so on. One of the authentication tests is"
" a default dependency but if you put on the list different authentication"
" it will be used instead of default one."
msgstr ""
"**test-id-1;test-id-2** 是用分号分隔的测试用例ID。测试用例按列出的顺序执行"
"。并在那里列出它们其意味着test-id-2取决于 test-id-1。通常，您不必列出所有依赖"
"项，因为所有强制依赖项都会自动包含在内。这意味着如果您有一个身份验证测试用例"
"，该套件会自动添加网络套接字连接和流打开测试。但是，有时存在可选的依赖项或多"
"个强制依赖项，您需要选择必须执行的依赖项。一个很好的例子是身份验证测试用例。"
"有许多身份验证测试：PLAIN-AUTH、SASL-DIGESTMD5、SASL-PLAIN、DIGEST-"
"AUTH，它们对于大多数其他测试（如 roster、presence 等）都是强制性的。其中一项"
"身份验证测试是默认依赖项，但如果您将不同的身份验证放在列表中，它将被使用而不"
"是默认的。"

#: ../../Tigase_Development/Tests.rst:250
msgid ""
"**:** is a separator between test cases ids list and the short test "
"description."
msgstr "**:** 是测试用例ID列表和简短测试描述之间的分隔符。"

#: ../../Tigase_Development/Tests.rst:252
msgid ""
"**Short test description** is placed between : - colon and opening **{** "
"- curly bracket. This is usually quite brief, single line test "
"description."
msgstr "**Short test description** 放在： - 冒号和开头 **{** - "
"大括号之间。这通常是非常简短的单行测试描述。"

#: ../../Tigase_Development/Tests.rst:254
msgid ""
"**{ }** curly brackets contain all the test parameters, like how many "
"times the test has to be executed or run the test in a separate thread, "
"user name, host IP address for the network connection and many others."
msgstr "**{ }** 大括号包含所有测试参数，例如必须执行多少次测试或在单独的线程中运行测"
"试、用户名、网络连接的主机IP地址等等。"

#: ../../Tigase_Development/Tests.rst:256
msgid ""
"**>> <<** inside the double greater than and double less than you put a "
"very long, multiple line test description."
msgstr "**>> <<** 在两个大于号和两个小于号里面你放了一个很长的多行测试描述。"

#: ../../Tigase_Development/Tests.rst:258
msgid ""
"As for the testing script between open curly brackets { and close one } "
"you can put all the test case parameters you wish. The format for it is:"
msgstr "对于左大括号 { 和右大括号 } "
"之间的测试脚本，您可以放置您想要的所有测试用例参数。它的格式是："

#: ../../Tigase_Development/Tests.rst:260
msgid "**-parameter-name = value**"
msgstr "**-parameter-name = value**"

#: ../../Tigase_Development/Tests.rst:262
msgid ""
"Parameter names always start with **-**. Note, some parameters don’t "
"require any value. They can exist on their own without any value "
"assigned:"
msgstr "参数名称始终以 **-** "
"开头。请注意，某些参数不需要任何值。它们可以独立存在而无需分配任何值："

#: ../../Tigase_Development/Tests.rst:264
msgid "**-debug-on-error**"
msgstr "**-debug-on-error**"

#: ../../Tigase_Development/Tests.rst:266
msgid "This imitates if you were to put **yes** or **true** as the value."
msgstr "这模拟了您是否将 **yes** 或 **true** 作为值。"

#: ../../Tigase_Development/Tests.rst:268
msgid ""
"The scripting language includes also support for variables which can be "
"assigned any value and used multiple times later on. You assign a value "
"to the variable the same way as you assign it to the parameter:"
msgstr "脚本语言还包括对可以分配任何值并在以后多次使用的变量的支持。将值分配给变量的"
"方式与将其分配给参数的方式相同："

#: ../../Tigase_Development/Tests.rst:270
msgid "**$(variable-name) = value**"
msgstr "**$(variable-name) = value**"

#: ../../Tigase_Development/Tests.rst:272
msgid ""
"The variable name must be always enclosed with brackets **()** and start "
"with **$**."
msgstr "变量名必须始终用方括号 **()** 括起来并以 **$** 开头。"

#: ../../Tigase_Development/Tests.rst:274
msgid ""
"The value may be enclosed within double quotes **\"\"** or double quotes "
"may be omitted. If this is a simple string like a number or character "
"string consisting only of digits, letters, underscore **\\_** and hyphen "
"**-** then you can omit double quotes otherwise you must enclose the "
"value."
msgstr ""
"该值可以用双引号 **\"\"** "
"括起来，或者可以省略双引号。如果这是一个简单的字符串，例如仅由数字、字母、"
"下划线 **\\_** 和连字符 **-** "
"组成的数字或字符串，则可以省略双引号，否则必须将值括起来。"

#: ../../Tigase_Development/Tests.rst:276
msgid ""
"The test case descriptions can be nested inside other test case "
"descriptions. Nested test case descriptions inherit parameters and "
"variables from outer test case description."
msgstr "测试用例描述可以嵌套在其他测试用例描述中。嵌套测试用例描述从外部测试用例描述"
"继承参数和变量。"

#: ../../Tigase_Development/Tests.rst:279
msgid "Writing Tests for Plugins"
msgstr "为插件编写测试"

#: ../../Tigase_Development/Tests.rst:281
msgid ""
"You can write tests in a simple text file which is loaded during test "
"suite runtime."
msgstr "您可以在测试套件运行时加载的简单文本文件中编写测试。"

#: ../../Tigase_Development/Tests.rst:283
msgid ""
"You simply specify what should be send to the server and what response "
"should be expected from the server. No need to write Java code and "
"recompile the whole test suite for new tests. It means new test cases can"
" be now written easily and quickly which hopefully means more detailed "
"tests for the server."
msgstr ""
"您只需指定应发送到服务器哪些内容以及应从服务器获得哪些响应。无需为新测试编写J"
"ava代码和重新编译整个测试套件。这意味着现在可以轻松快速地编写新的测试用例，这"
"可能意味着对服务器进行更详细的测试。"

#: ../../Tigase_Development/Tests.rst:285
msgid "How it works:"
msgstr "这个是如何工作的："

#: ../../Tigase_Development/Tests.rst:287
msgid ""
"Let’s take `XEP-0049 <http://www.xmpp.org/extensions/xep-0049.html>`__ "
"Private XML Storage. Looking into the spec we can see the first example:"
msgstr ""
"让我们以 `XEP-0049 <http://www.xmpp.org/extensions/xep-0049.html>`__ "
"私有XML存储为例。查看规范，我们可以看到第一个示例："

#: ../../Tigase_Development/Tests.rst:290
msgid "Example: Client Stores Private Data"
msgstr "示例：客户端存储私有数据"

#: ../../Tigase_Development/Tests.rst:292
msgid "**CLIENT:**"
msgstr "**客户：**"

#: ../../Tigase_Development/Tests.rst:304
msgid "**SERVER:**"
msgstr "**服务器：**"

#: ../../Tigase_Development/Tests.rst:310
msgid ""
"This is enough for the first simple test. I have to create text file "
"``JabberIqPrivate.test`` looking like this:"
msgstr "这对于第一个简单的测试来说已经足够了。我必须创建如下所示的文本文件 "
"``JabberIqPrivate.test``："

#: ../../Tigase_Development/Tests.rst:329
msgid "And now I can execute the test:"
msgstr "现在我可以执行测试了："

#: ../../Tigase_Development/Tests.rst:366
msgid ""
"If I just started working on this XEP and there is no code on the server "
"side, the result is perfectly expected although maybe this is not what we"
" want. After a while of working on the server code I can execute the test"
" once again:"
msgstr ""
"如果我刚开始研究这个XEP并且在服务器端没有代码，那么结果是完全可以预期的，尽管"
"这可能不是我们想要的。在处理服务器代码一段时间后，我可以再次执行测试："

#: ../../Tigase_Development/Tests.rst:396
msgid ""
"This is it. The result we want in a simple and efficient way. We can "
"repeat it as many times we want which is especially important in longer "
"term trials. Every time we change the server code we can re-run tests to "
"make sure we get correct responses from the server."
msgstr ""
"就是这些。以简单有效的方式获得我们想要的结果。我们可以重复多次，这在长期试验"
"中尤为重要。每次我们更改服务器代码时，我们都可以重新运行测试以确保我们从服务"
"器获得正确的响应。"

#: ../../Tigase_Development/Tests.rst:398
msgid ""
"You can have a look in the current build, with more complete test cases, "
"file for `JabberIqPrivate <https://github.com/tigase/tigase-"
"testsuite/tree/master/tests/data/JabberIqPrivate.cot>`__."
msgstr ""
"您可以查看当前构建，包含更完整的测试用例，文件为 `JabberIqPrivate "
"<https://github.com/tigase/tigase-testsuite/tree/master/tests/data/"
"JabberIqPrivate.cot>`__。"

#: ../../Tigase_Development/Tests.rst:400
msgid ""
"Now my server tests are no longer outdated. Of course not all cases are "
"so simple. Some XEPs require calculations to be done before stanza is "
"sent or to compare received results. A good example for this case is user"
" authentication like SASL and even NON-SASL. But still, there are many "
"cases which can be covered by simple tests: roster management, privacy "
"lists management, vCard, private data storage and so on."
msgstr ""
"现在我的服务器测试不再过时。当然，并非所有情况都如此简单。一些XEP要求在发送节"
"之前进行计算或比较接收到的结果。这种情况的一个很好的例子是像SASL甚至NON-SASL"
"这样的用户身份验证。但是，仍然有很多情况可以通过简单的测试来涵盖：名册管理、"
"隐私列表管理、vCard、私人数据存储等等。"

#: ../../Tigase_Development/Tests.rst:403
msgid "Test Case Parameters Description"
msgstr "测试用例参数说明"

#: ../../Tigase_Development/Tests.rst:405
#: ../../Tigase_Development/Tests.rst:407
msgid ""
"There is long list of parameters which can be applied to any test case. "
"Here is the description of all possible parameters which can be used to "
"build test scenarios."
msgstr "有一长串参数可以应用于任何测试用例。以下是可用于构建测试场景的所有可能参数的"
"描述。"

#: ../../Tigase_Development/Tests.rst:410
msgid "Test Report Configuration"
msgstr "测试报告配置"

#: ../../Tigase_Development/Tests.rst:412
msgid ""
"There are test report parameters which must be set in the main script "
"file in order to generate HTML report from the test. These parameters "
"have no effect is they are set inside the test case description."
msgstr "为了从测试中生成HTML报告，必须在主脚本文件中设置测试报告参数。这些参数没有任"
"何影响，因为它们是在测试用例描述中设置的。"

#: ../../Tigase_Development/Tests.rst:414
msgid ""
"**-version = 2.0.0** sets the test script version. This is used to easily"
" detect incompatibility issues when the test suite loads a script created"
" for more recent version of the suite and may not work properly for this "
"version."
msgstr ""
"**-version = 2.0.0** 设置测试脚本版本。当测试套件加载为该套件的更新版本创建的"
"脚本并且可能无法在此版本中正常工作时，这用于轻松检测不兼容问题。"

#: ../../Tigase_Development/Tests.rst:416
msgid ""
"**-output-format = (html \\| html-content)** sets the output format for "
"the test report. There is actually only one format possible right now - "
"HTML. The only difference between these 2 options is that the **html** "
"format creates full HTML page with HTML header and body. The **html-"
"content** format on the other hand creates only what is inside "
"``<body/>`` element. And is used to embed test result inside other HTML "
"content."
msgstr ""
"**-output-format = (html \\| html-content)** 设置测试报告的输出格式。"
"现在实际上只有一种可能的格式 - HTML。这两个选项之间的唯一区别是 **html** "
"格式创建带有HTML标题和正文的完整HTML页面。另一方面，**html-content** "
"格式只创建 ``<body/>`` 元素内的内容。并用于将测试结果嵌入到其他HTML内容中。"

#: ../../Tigase_Development/Tests.rst:418
msgid ""
"**-output-file = \"report-file.html\"** sets the file name for the test "
"report."
msgstr "**-output-file = \"report-file.html\"** 设置测试报告的文件名。"

#: ../../Tigase_Development/Tests.rst:420
msgid ""
"**-output-history = (yes \\| no)** sets logging of the all protocol data "
"sent between test suite and the XMPP server. Normally for functional "
"tests it is recommended to set it to **yes** but for all other tests like"
" performance or load tests it should be set to **no**."
msgstr ""
"*-output-history = (yes \\| no)** 设置测试套件和XMPP服务器之间发送的所有协议"
"数据的日志记录。通常，对于功能测试，建议将其设置为 "
"**yes**，但对于所有其他测试，如性能或负载测试，应将其设置为 **no**。"

#: ../../Tigase_Development/Tests.rst:422
msgid ""
"**-history-format = separate-file** sets protocol data logging to a "
"separate file. Currently this is the only possible option."
msgstr "**-history-format = separate-file** "
"将协议数据记录设置为单独的文件。目前这是唯一可能的选择。"

#: ../../Tigase_Development/Tests.rst:424
msgid "**-output-cols = (5 \\| 7)** Only valid values are:"
msgstr "**-output-cols = (5 \\| 7)** 仅有有效值是："

#: ../../Tigase_Development/Tests.rst:431
msgid ""
"**-title** = \"The title of the report page\" This parameter sets the "
"test report title which is placed in the HTML page in the ``<title/>`` "
"element as well as in the first page header."
msgstr "**-title** = \"报告页的标题\" 此参数设置测试报告的标题，它位于HTML页面的 <"
"title/> 元素以及第一页标题中。"

#: ../../Tigase_Development/Tests.rst:434
msgid "Basic Test Parameters"
msgstr "基本测试参数"

#: ../../Tigase_Development/Tests.rst:436
msgid ""
"These parameters can be set on per-test case basis but usually they are "
"set in the main script file to apply them to all test cases."
msgstr "这些参数可以在每个测试用例的基础上设置，但通常它们在主脚本文件中设置以将它们"
"应用于所有测试用例。"

#: ../../Tigase_Development/Tests.rst:438
msgid ""
"**-base-ns = \"jabber:client\"** sets the XML name space used for the XML"
" stream in the XMPP connection. Some test cases can be used to test "
"client to server protocol as well as server to server protocol and "
"possibly different protocols added in the future."
msgstr ""
"**-base-ns = \"jabber:client\"** 设置用于XMPP连接中XML流的XML名称空间。一些测"
"试用例可用于测试客户端到服务器协议以及服务器到服务器协议以及将来可能添加的不"
"同协议。"

#: ../../Tigase_Development/Tests.rst:440
msgid ""
"**-debug** switches debugging mode on. All the communication between the "
"test suite and the server is printed out to the text console and all "
"other debugging information including java exceptions are displayed as "
"well. It is especially useful when some test fails and you want to find "
"out why."
msgstr ""
"**-debug** 打开调试模式。测试套件和服务器之间的所有通信都打印到文本控制台，并"
"且还显示所有其他调试信息，包括 "
"java异常。当某些测试失败并且您想找出原因时，它特别有用。"

#: ../../Tigase_Development/Tests.rst:442
msgid ""
"**-debug-on-error** switches on debugging mode on error detection. "
"Normally debug output generates lots of message which makes the output "
"very hard to read. Especially in the performance tests not only you can "
"read fast scrolling lines of the protocol data but also it slows the test"
" down. This option however turns debugging off if everything is working "
"well and then generates debug output if any test error us detected."
msgstr ""
"**-debug-on-error** 在错误检测时打开调试模式。通常调试输出会生成大量消息，这"
"使得输出很难阅读。特别是在性能测试中，您不仅可以读取协议数据的快速滚动行，而"
"且还会减慢测试速度。但是，如果一切正常，此选项将关闭调试，然后如果我们检测到"
"任何测试错误，则生成调试输出。"

#: ../../Tigase_Development/Tests.rst:444
msgid ""
"**-def-auth = (auth-plain \\| auth-digest \\| auth-sasl)** sets the "
"default authentication method for the user connection."
msgstr ""
"**-def-auth = (auth-plain \\| auth-digest \\| auth-sasl)** "
"设置用户连接的默认身份验证方法。"

#: ../../Tigase_Development/Tests.rst:446
msgid ""
"**-def-stream = (stream-client \\| stream-server \\| stream-component \\|"
" stream-bosh)** sets the connection stream to be tested and the name "
"space for the connection."
msgstr ""
"**-def-stream = (stream-client \\| stream-server \\| stream-component \\| "
"stream-bosh)** 设置要测试的连接流和连接的命名空间。"

#: ../../Tigase_Development/Tests.rst:448
msgid ""
"**-host = \"host.name\"** the vhost name the tested server runs for. It "
"may be the real DNS name or just configured for testing purposes "
"hostname. It must match however the server configuration."
msgstr ""
"**-host = \"host.name\"** 测试服务器运行的虚拟主机名。它可能是真实的DNS名称，"
"或者只是为了测试目的而配置的主机名。但是它必须与服务器配置相匹配。"

#: ../../Tigase_Development/Tests.rst:450
msgid ""
"**-keys-file = \"certs/keystore\"** sets the location of the keys store "
"file. No need to touch it."
msgstr "**-keys-file = \"certs/keystore\"** 设置密钥存储文件的位置。没必要碰它。"

#: ../../Tigase_Development/Tests.rst:452
msgid ""
"**-keys-file-password = keystore** sets the password for the keystore "
"file. Normally you don’t have to touch it."
msgstr "**-keys-file-password = keystore** 设置密钥库文件的密码。通常你不必触摸它。"

#: ../../Tigase_Development/Tests.rst:454
msgid ""
"**-serverip = \"127.0.0.1\"** defines the XMPP server IP address. You may"
" omit this parameter and then the IP address will be determined "
"automatically based on the server DNS address. However if the DNS address"
" can not be correctly resolved or if you run tests on the localhost you "
"can use this parameter to enforce the IP address."
msgstr ""
"**-serverip = \"127.0.0.1\"** 定义XMPP服务器IP地址。您可以省略此参数，"
"然后将根据服务器DNS地址自动确定I 地址。但是，如果无法正确解析DNS地址，或者如"
"果您在localhost上运行测试，则可以使用此参数来强制执行IP地址。"

#: ../../Tigase_Development/Tests.rst:456
msgid ""
"**-socket-wait = 10000** sets the network socket timeout in milliseconds "
"that is maximum time the test suite will wait for the response from the "
"server. You may want to increase the timeout for some specific tests "
"which require lots of computation or database activity on the server. "
"Normally 10 seconds is enough for most cases."
msgstr ""
"**-socket-wait = 10000** 以毫秒为单位设置网络套接字超时，这是测试套件等待服务"
"器响应的最长时间。您可能希望增加某些特定测试的超时时间，这些测试需要在服务器"
"上进行大量计算或数据库活动。对于大多数情况，通常10秒就足够了。"

#: ../../Tigase_Development/Tests.rst:458
msgid ""
"**-stop-on-fail = true** causes the script to terminate all actions on "
"the first failed test case. It helps diagnosing the server state at the "
"failure point."
msgstr "**-stop-on-fail = true** 导致脚本终止对第一个失败的测试用例的所有操作。它有助"
"于在故障点诊断服务器状态。"

#: ../../Tigase_Development/Tests.rst:460
msgid ""
"**-trust-file = \"certs/client_truststore\"** sets the file name for the "
"client trust store file. No need to change it."
msgstr "**-trust-file = \"certs/client_truststore\"** "
"设置客户端信任存储文件的文件名。无需更改它。"

#: ../../Tigase_Development/Tests.rst:462
msgid ""
"**-trust-file-password = truststore** sets the password for the trust "
"store file. Normally you don’t have to touch it."
msgstr "**-trust-file-password = truststore** "
"设置信任库文件的密码。通常你不必触摸它。"

#: ../../Tigase_Development/Tests.rst:464
msgid ""
"**-user-name = tester** sets the user name used for the XMPP connections "
"between the test suite and the XMPP server. It is usually set globally "
"the same for all tests and for some tests like receiving the server "
"configuration you may want to use a different account (with admin "
"permissions). Then you can set a different user for this specific test "
"case."
msgstr ""
"**-user-name = tester** 设置用于测试套件和XMPP服务器之间的XMPP连接的用户名。"
"它通常对所有测试全局设置相同，对于某些测试，如接收服务器配置，您可能希望使用"
"不同的帐户（具有管理员权限）。然后，您可以为这个特定的测试用例设置不同的用户"
"。"

#: ../../Tigase_Development/Tests.rst:466
msgid ""
"**-user-pass = tester-password** sets the password for the user used for "
"the XMPP connection between the test suite and the XMPP server."
msgstr "**-user-pass = tester-password** "
"为用于测试套件和XMPP服务器之间的XMPP连接的用户设置密码。"

#: ../../Tigase_Development/Tests.rst:468
msgid ""
"**-user-resr = resource** sets the user JID resource part for the XMPP "
"connection between the test suite and the XMPP server."
msgstr "**-user-resr = resource** "
"为测试套件和XMPP服务器之间的XMPP连接设置用户JID资源部分。"

#: ../../Tigase_Development/Tests.rst:471
msgid "Test Case Parameters"
msgstr "测试用例参数"

#: ../../Tigase_Development/Tests.rst:473
msgid ""
"Test parameters which are normally set on per-test case basis and apply "
"only to the test they are set for and all inherited tests. Some of the "
"parameters though are applied only to inherited test cases. Please look "
"in the description below to find more details."
msgstr ""
"测试参数通常在每个测试用例的基础上设置，并且仅适用于为其设置的测试和所有继承"
"的测试。不过，有些参数仅适用于继承的测试用例。请查看下面的描述以找到更多详细"
"信息。"

#: ../../Tigase_Development/Tests.rst:475
msgid ""
"**-active-connection** is a similar parameter to **-on-one-socket** "
"option. If set the suite doesn’t close the network socket and if the test"
" is run in loop each loop run re-uses the network connection. Unlike in "
"the -on-one-socket mode the whole test is executed on each run including "
"XMPP stream initialization and user authentication. This option is "
"currently not recommended in a normal use. It is useful only to debug the"
" server behavior in very special use cases."
msgstr ""
"**-active-connection** 是与 **-on-one-socket** 选项类似的参数。如果设置套件不"
"会关闭网络套接字，并且如果测试在循环中运行，则每个循环运行都会重新使用网络连"
"接。与 -on-one-socket 模式不同，整个测试在每次运行时执行，包括XMPP流初始化和"
"用户身份验证。目前不建议在正常使用中使用此选项。仅在非常特殊的用例中调试服务"
"器行为才有用。"

#: ../../Tigase_Development/Tests.rst:477
msgid ""
"**-background** executes the test in a separate thread in background and "
"immediately returns control to the test suite program without waiting for"
" the test to complete. Default behavior is to execute all tests "
"sequentially and run next test when previous one has been completed. This"
" parameter however allows to run tests concurrently. This a bit similar "
"option to the **-daemon** parameter. The daemon test/task however is "
"ignored completely and results from the daemon are not collected where "
"the background test is a normal test which is run concurrently with "
"another one or possibly many other tests."
msgstr ""
"**-background** 在后台的单独线程中执行测试，并立即将控制权返回给测试套件程序"
"，而无需等待测试完成。默认行为是按顺序执行所有测试，并在前一个测试完成后运行"
"下一个测试。但是，此参数允许同时运行测试。这有点类似于 **-daemon** 参数的选项"
"。然而，守护程序测试/任务被完全忽略，并且在后台测试是与另一个或可能许多其他测"
"试同时运行的正常测试的情况下，不会收集来自守护程序的结果。"

#: ../../Tigase_Development/Tests.rst:479
msgid ""
"**-daemon** creates a task running in background in a separate thread. "
"Such a test runs infinitely as a daemon, it is not recorded in the test "
"report and it’s result is not calculated. The purpose of such test/task "
"is to work as a helper for other test cases. A good example of such "
"daemon test is message responder - the test which runs under a different "
"user name and waits for messages and responding to the sender."
msgstr ""
"**-daemon** 在单独的线程中创建在后台运行的任务。这样的测试作为守护进程无限运"
"行，它不记录在测试报告中，也不计算它的结果。此类测试/任务的目的是充当其他测试"
"用例的助手。此类守护程序测试的一个很好的例子是消息响应者 - "
"以不同的用户名运行并等待消息并响应发送者的测试。"

#: ../../Tigase_Development/Tests.rst:481
msgid ""
"**-delay = 1000** sets the waiting time in milliseconds after the test "
"case is completed. You may use it if you want to introduce short delay "
"between each test cases run in the loop or if you start the helper daemon"
" thread and you have to add the delay to make sure it is ready to work "
"before next real test starts sending requests to the daemon."
msgstr ""
"**-delay = 1000** 设置测试用例完成后的等待时间（毫秒）。如果您想在循环中运行"
"的每个测试用例之间引入短暂的延迟，或者如果您启动助手守护线程并且您必须添加延"
"迟以确保它在下一个真实测试开始发送请求之前准备好工作，您可以使用它守护进程。"

#: ../../Tigase_Development/Tests.rst:483
msgid ""
"**-expect-type = error** sets the type for a packet expected as a "
"response. Some test cases like message sender expects sometimes response "
"with the same type it has sent the packet ( **chat** ) but in some other "
"cases when it sends a message to a user who has privacy lists set to "
"block messages the response should be with an error. This way we can use "
"the same test cases for testing different responses scenarios."
msgstr ""
"**-expect-type = error** 设置预期作为响应的数据包的类型。某些测试用例（例如消"
"息发送者）有时会期望以与发送数据包（**chat**）相同的类型进行响应，但在某些其"
"他情况下，当它向已设置隐私列表以阻止消息的用户发送消息时，响应应该会有错误。"
"这样我们就可以使用相同的测试用例来测试不同的响应场景。"

#: ../../Tigase_Development/Tests.rst:485
msgid ""
"**-loop = 10** sets the number of times the test (and all inherited "
"tests) are repeated. You can use a **$(loop)** pseudo-variable to obtain "
"and use the current loop run number. This is useful if you want to run "
"every loop run for a different user name like registering 10 different "
"user accounts. To do this you stick the $(loop) variable to the user name"
" string: **-user-name = \"nick_name_$(loop)\"**."
msgstr ""
"**-loop = 10** 设置测试（以及所有继承的测试）重复的次数。您可以使用 "
"**$(loop)** 伪变量来获取和使用当前循环运行次数。如果您想为不同的用户名（例如"
"注册10个不同的用户帐户）运行每个循环运行，这很有用。为此，您将$(loop)变量粘贴"
"到用户名字符串：**-user-name = \"nick_name_$(loop)\"**。"

#: ../../Tigase_Development/Tests.rst:487
msgid ""
"**-loop-delay = 10** sets a delay in milliseconds between each individual"
" loop run for the tests which is run multiple times. This is similar "
"parameter to the **-delay** one but the **-delay** option introduces a "
"delay after the whole test (or all loop runs) has been completed. The "
"loop delay options adds waiting time between each run of the looped test."
msgstr ""
"**-loop-delay = 10** "
"为多次运行的测试设置每个单独循环运行之间的延迟（以毫秒为单位）。这与 "
"**-delay** 参数类似，但 **-delay** 选项会在整个测试（或所有循环运行）完成后引"
"入延迟。循环延迟选项增加了每次循环测试运行之间的等待时间。"

#: ../../Tigase_Development/Tests.rst:489
msgid ""
"**-loop-start = 5** sets the loop starting value. It doesn’t affect "
"number of loop runs in a any way. It only affects the value of the "
"**$(loop)** variable. Let’s say you want to run a load test for the "
"server with 100k concurrent users and you want to run the test from 3 "
"different machines. To make sure each machine uses distinct user accounts"
" you have to set a different **-loop-start** parameter on each to prevent"
" from overlapping."
msgstr ""
"**-loop-start = 5** 设置循环起始值。它不会以任何方式影响循环运行的次数。"
"它只影响 **$(loop)** 变量的值。假设您想为具有100k并发用户的服务器运行负载测试"
"，并且您想从3台不同的机器上运行测试。为确保每台机器使用不同的用户帐户，"
"您必须在每台机器上设置不同的 **-loop-start** 参数以防止重叠。"

#: ../../Tigase_Development/Tests.rst:491
msgid ""
"**-messages = 10** sets the number of messages to send to the server. "
"This is another way of looping the test. Instead of repeating the whole "
"test with opening network connection, XMPP stream, authentication and so "
"on it causes only to send the message this many times. This parameters is"
" accepted by some test cases only which send messages. For the messages "
"listeners - test cases which is supposed to respond to the messages the "
"number set here specifies how many times the the response must be sent "
"before the test successfully terminates it’s work."
msgstr ""
"**-messages = 10** 设置发送到服务器的消息数量。这是循环测试的另一种方式。而不"
"是通过打开网络连接、XMPP流、身份验证等来重复整个测试，它只会导致多次发送消息"
"。这个参数只被一些发送消息的测试用例接受。对于消息侦听器 - 应该响应消息的测试"
"用例，此处设置的数字指定在测试成功终止之前必须发送响应的次数。"

#: ../../Tigase_Development/Tests.rst:493
msgid ""
"**-multi-thread** option causes to run the test case and all inherited in"
" all levels test cases in separate threads. Normally the test case where "
"you put the parameter doesn’t have a test ID (what you put between '@' "
"and ':' characters so it doesn’t run a test on it’s own. Instead it "
"contains a series of test cases inside which are then run in a separate "
"thread each. This is a key parameter to run tests for many concurrent "
"users. (Not a load tests though.) For example you can see whether the "
"server behaves correctly when 5 simultaneous modifies their roster. The "
"execution time all inherited tests run in a separate threads is added "
"together and also results from each individual test is calculated and "
"added to the total main test results."
msgstr ""
"**-multi-thread** 选项导致在单独的线程中运行测试用例并在所有级别的测试用例中"
"全部继承。通常，您放置参数的测试用例没有测试ID（您在 '@' 和 ':' 字符之间放置"
"的内容），因此它不会自行运行测试。相反，它在内部包含一系列测试用例然后每个线"
"程在单独的线程中运行。这是为许多并发用户运行测试的关键参数。（虽然不是负载测"
"试。）例如，当5人同时修改他们的花名册时，您可以查看服务器是否正确运行。执行将"
"在单独线程中运行的所有继承测试加在一起，并且计算每个单独测试的结果并将其添加"
"到总主测试结果中。"

#: ../../Tigase_Development/Tests.rst:495
msgid ""
"**-no-record** is used for kind of configuration tests (tasks) which are "
"used to prepare the XMPP server or database for later tests. As an "
"example can be creation of the test user account which is later on used "
"for the roster tests. Usually you don’t want to include such tests in the"
" test report and using this parameter you essentially exclude the test "
"from the report. The test and the result however shows in the command "
"line output so you can still track what is really going on."
msgstr ""
"**-no-record** 用于一种配置测试（任务），用于为以后的测试准备XMPP服务器或数据"
"库。例如，可以创建稍后用于名册测试的测试用户帐户。通常你不想在测试报告中包含"
"这样的测试，并且使用这个参数你基本上从报告中排除了测试。然而，测试和结果显示"
"在命令行输出中，因此您仍然可以跟踪实际发生的情况。"

#: ../../Tigase_Development/Tests.rst:497
msgid ""
"**-on-one-socket** is a modifier for a looped test case. Normally when we"
" switch looping on using **-loop** parameter the suite resets the state, "
"closes the network socket and runs the test from the very beginning "
"including opening network socket, XMPP stream, authentication and so on. "
"This parameter however changes this behavior. The network socket is not "
"closed when the test run is completed (successfully) and next run "
"executes only the last part of the test omitting the XMPP stream "
"initialization, authentication and all others but last. This is useful "
"when you want to send many messages to the server (although this effect "
"may be accomplished using **-messages** parameter as well) or registering"
" many user accounts on the server, unregistering user accounts and any "
"other which might make sense repeating many times."
msgstr ""
"**-on-one-socket** 是循环测试用例的修饰符。通常，当我们使用 **-loop** 参数打"
"开循环时，套件会重置状态，关闭网络套接字并从一开始就运行测试，包括打开网络套"
"接字、XMPP流、身份验证等。然而，这个参数改变了这种行为。当测试运行完成（成功"
"）时网络套接字不会关闭，下一次运行只执行测试的最后一部分，同时省略XMPP流初始"
"化、身份验证和除最后之外的所有其他部分。当您想向服务器发送许多消息（"
"尽管此效果也可以使用 **-messages** 参数来实现）或在服务器上注册许多用户帐户、"
"注销用户帐户和任何其他可能有意义的情况时，这重复多次可能是有意义的。"

#: ../../Tigase_Development/Tests.rst:499
msgid ""
"**-port = 5223** this parameter is similar to the IP address setting and "
"can be also set globally for all tests. Normally however you set it for a"
" selected tests only to check SSL connection. For all other tests default"
" port number is used. Therefore this parameters has been included in this"
" section instead of \"Basic test parameters\"."
msgstr ""
"**-port = 5223** 该参数与IP地址设置类似，也可以对所有测试进行全局设置。但是，"
"通常您将其设置为仅用于检查SSL连接的选定测试。对于所有其他测试，使用默认端口号"
"。因此，此参数已包含在本节中，而不是\"基本测试参数\"。"

#: ../../Tigase_Development/Tests.rst:501
msgid ""
"**-presence** this parameter enables sending initial presence with "
"positive priority after connection and binding the session."
msgstr "**-presence** 此参数允许在连接和绑定会话后发送具有正优先级的初始状态。"

#: ../../Tigase_Development/Tests.rst:503
msgid ""
"**-repeat-script = 100** and **-repeat-wait = 10** are 2 parameters are "
"specific to the common test cases. (The test cases which reads the test "
"input/output data from the pseudo-xml text file. The first parameter is "
"another variation of test looping. It sets how many times the test has to"
" be repeated. It works very much like the **-on-one-socket** parameter. "
"The only difference is that the common test can preserve some internal "
"states between runs and therefore it has more control over the data. The "
"second parameter sets the timeout in milliseconds to wait/delay between "
"each individual test run and it is a very similar parameter to the "
"**-delay** one but it sets a timeout inside the common test instead."
msgstr ""
"**-repeat-script = 100** 和 **-repeat-wait = 10** "
"是针对常见测试用例的2个参数。 （从伪xml文本文件中读取测试输入/输出数据的测试"
"用例）。第一个参数是测试循环的另一种变体。它设置测试必须重复多少次。"
"它的工作方式非常类似于 ** -on-one-socket** 参数。唯一的区别是普通测试可以在运"
"行之间保留一些内部状态，因此它可以更好地控制数据。第二个参数以毫秒为单位设置"
"每个人之间的等待/延迟超时测试运行，它是一个与 **-delay** "
"非常相似的参数，但它在通用测试中设置了超时。"

#: ../../Tigase_Development/Tests.rst:505
msgid ""
"**-source-file = \"dir/path/to/file.cot\"** is a parameter to set the "
"\"common test\" script file. The common test is a test cases which "
"depends on the authentication test case and can read data to send and "
"responses to expect from the text file. The \"cot\" file is a pseudo-xml "
"file with stanzas to send and stanzas to expect. The the test cases "
"compares the received packets with those in the text file and reports the"
" test result. This is usually a more convenient way to write a new test "
"cases than coding them in Java."
msgstr ""
"**-source-file = \"dir/path/to/file.cot\"** 是设置\"通用测试\"脚本文件的参数"
"。常见的测试是依赖于身份验证测试用例的测试用例，可以从文本文件中读取要发送的"
"数据和期望的响应。 \"cot\"文件是一个伪xml文件，其中包含要发送的节和要期待的节"
"。测试用例将接收到的数据包与文本文件中的数据包进行比较，并报告测试结果。这通"
"常比用Java编写新的测试用例更方便。"

#: ../../Tigase_Development/Tests.rst:507
msgid ""
"**-time-out-ok** is set for a test case when we expect socket timeout as "
"a correct result from the test case. Normally the timeout means that the "
"test failed and there was no response from the server at all or the "
"response was incorrect. For some tests however (like sending a message to"
" the user who is blocking messages through privacy lists) the timeout is "
"the desired correct test result."
msgstr ""
"当我们期望套接字超时作为测试用例的正确结果时，为测试用例设置 **-time-out-ok**"
"。通常超时意味着测试失败并且服务器根本没有响应或响应不正确。然而，对于某些测"
"试（例如向通过隐私列表阻止消息的用户发送消息）超时是所需的正确测试结果。"

#: ../../Tigase_Development/Tests.rst:509
msgid ""
"**-to-jid = \"**\\ user_name@host.name\\ **\"** sets the destination "
"address for packets sending packets somewhere. As an example is the test "
"case sending ``<message/>`` packet. You can set the destination address "
"for the packet. Mind, normally every test expects some response for the "
"data sent so make sure the destination end-point will send back the data "
"expected by the test case."
msgstr ""
"**-to-jid = \"**\\ user_name@host.name\\ **\"** "
"为在某处发送数据包的数据包设置目标地址。例如发送 <message/> 数据包的测试用例"
"。您可以设置数据包的目标地址。请注意，通常每个测试都期望对发送的数据有一些响"
"应，因此请确保目标端点将发回测试用例期望的数据。"
