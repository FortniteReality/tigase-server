[[LetsEncryptCertificate]]
= Installing LetsEncrypt Certificates in Your Linux System
:author: Daniel Wisnewski <daniel.wisnewski@tigase.net>
:version: v2.0, November 2016: Reformatted for Kernel/DSL

LetsEncrypt is a trusted CA that provides free security certificates. Unlike previously self-signed certificates, we can use LetsEncrypt Certificates to certify your domains from a trusted source.

Please refer to official https://certbot.eff.org/docs/using.html[certbot User Guide] for details how to install and operate the tool, choosing desired method of domain authentication (DNS or webserver). After successful execution the certificate with all related files will be stored under `/etc/letsencrypt/live/$domain`

[source,bash]
-----
$ sudo ls  /etc/letsencrypt/live/$domain
cert.pem  chain.pem  fullchain.pem  privkey.pem  README
-----

In that directory, you will find four files:

- `privkey.pem` - private key for the certificate
- `cert.pem` - contains the server certificate by itself
- `chain.pem` - contains the additional intermediate certificate or certificates
- `fullchain.pem` - all certificates, including server certificate (aka leaf certificate or end-entity certificate). The server certificate is the first one in this file, followed by any intermediates.

For Tigase XMPP Server, we are only concerned with `privkey.pem` and `fullchain.pem` (or `chain.pem` - please consider actual issuers!).

At this point we will need to obtain the root and intermediate certificates, this can be done by downloading these certificates from the link:https://letsencrypt.org/certificates/[LetsEncrypt website].

Alternatively, you may obtain them using wget:
[source,bash]
-----
wget https://letsencrypt.org/certs/isrgrootx1.pem
wget https://letsencrypt.org/certs/letsencryptauthorityx3.pem
-----

These are the root certificate, and the intermediate certificate signed by root certificate.

NOTE: IdenTrust cross-signed certificate will not function properly.

Take the contents of your `privkey.pem`, certificate, and combine them with the contents of `isrgrootx1.pem` and `letsencryptauthorityx3.pem` into a single pem certificate.

Depending on your configuration you either need to name the file after your domain such as `mydomain.com.pem` and place it under `certs/` subdirectory of Tigase XMPP Server installation or update it using admin ad-hoc (see <<certificateStorage>>)

If you moved all certs to a single directory, you may combine them using the following command under *nix operating systems:.

[source,bash]
-----
cat ./cert.pem ./privkey.pem ./letsencryptauthorityx3.pem ./isrgrootx1.pem > mydomain.com.pem
-----

NOTE: If you are using `isrgrootx1` root make sure you use `cert.pem` file instead of `fullchain.pem`, which uses different intermediate certificate ( https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt[Let’s Encrypt Authority X3 (IdenTrust cross-signed)] ) and you will have to use https://letsencrypt.org/certs/trustid-x3-root.pem.txt[DST Root CA X3] certificate!

Your certificate should look something like this:

[source,certificate]
------
-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDAUAqqKu7Z4odo
...
og89F9AbWr1mNmyRoScyqMXo
-----END PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4
...
TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
FhpodHRwOi8vY3BzLmxldHNlbmNyeXB0Lm9yZzCBqwYIKwYBBQUHAgIwgZ4MgZtU
...
bmcgUGFydGllcyBhbmQgb25seSBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIENlcnRp
-----END CERTIFICATE-----
------

WARNING: LetsEncrypt certificates expire 90 days from issue and need to be renewed in order for them to remain valid!

You can check your certificate with utility class:

```
java -cp <path_to_tigase-server_installation>/jars/tigase-utils.jar tigase.cert.CertificateUtil -lc mydomain.com.pem -simple
```

== Let's encrypt and DNS verification

The only way to obtain wildcard (`*.domain.com`) certificate is via DNS verification. Certbot support a number of DNS operators - you can check if your DNS provider is listed by executing `$ certbot plugins`

=== AWS Route53

If you want to use it with Amazon Cloud you should install plugin for AWS:
```
pip install certbot-dns-route53
```

[NOTE]
    If you are using certbot under macOS and you installed it via brew then you should use:
    `$( brew --prefix certbot )/libexec/bin/pip install certbot-dns-route53`

You should store your credentials in `~/.aws/credentials` (you may want to create dedicated policy for updating DNS as described in https://certbot-dns-route53.readthedocs.io/en/stable/[plugin's documentation]:

[source,bash]
----
[default]
aws_access_key_id = <key_id>
aws_secret_access_key = <key>
----

And afterward you should execute `certbot` with `--dns-route53` parameter

== Certbot update hook and Tigase API

For greater automation it's possible to automate updating certificate obtained with `certbot` in Tigase XMPP Server. You should use following deploy hook - either add it to `/etc/letsencrypt/renewal-hooks/deploy/` or use it directly in `certboot` commandline with `--deploy-hook` parameter (in the latter case, it will be added to particular domain configuration so it's not necessary to specify UPDATE_DOMAINS).

NOTE: Please adjust account credentials used for deployment (`USER`, `PASS`, `DOMAIN`) as well as paths to Let's Encrypt certificates (_ISRG Root X1_ named `isrgrootx1.pem` and _Let’s Encrypt Authority X3_ named `letsencryptauthorityx3.pem`)

[source,bash]
----
#!/bin/bash

set -e

## Configuration START

USER="admin_username"
PASS="admin_password"
DOMAIN="my_domain.tld"
HOST=${DOMAIN}
#UPDATE_DOMAINS=(${DOMAIN})
# PORT=":8080"
# APIKEY="?api-key=mySecretKey"
LE_CERTS_PATH="/path/to/letsencrypt/CA/certificates/"

## Configuration END

fail_count=0

for domain in ${RENEWED_DOMAINS[@]}; do
	if [[ $domain == "*."* ]]; then
		CERT_DOMAIN=${domain#*\*.}
	else
		CERT_DOMAIN=${domain}
	fi

    if [[ ! -z "${UPDATE_DOMAINS}" ]] ; then
        match=0
        for dn in "${UPDATE_DOMAINS[@]}"; do
            if [[ $dn = "$CERT_DOMAIN" ]]; then
                match=1
                break
            fi
        done
        if [[ $match = 0 ]]; then
            echo "Skipping updating ${domain} because it's not in the list of supported domains: ${UPDATE_DOMAINS[@]}"
            continue
        fi
    fi

    CERT=`cat "$RENEWED_LINEAGE/cert.pem" "$RENEWED_LINEAGE/privkey.pem" ${LE_CERTS_PATH}/isrgrootx1.pem ${LE_CERTS_PATH}/letsencryptauthorityx3.pem`

	REQUEST="
	<command>
	  <node>ssl-certificate-add</node>
	  <fields>
		<item>
		  <var>Certificate in PEM format</var>
		  <value>${CERT}</value>
		</item>
		<item>
		  <var>command-marker</var>
		  <value>command-marker</value>
		</item>
		<item>
		  <var>VHost</var>
		  <value>${CERT_DOMAIN}</value>
		</item>
		<item>
		  <var>Save to disk</var>
		  <value>true</value>
		</item>
	  </fields>
	</command>"

	response=`curl -s -L -H "Content-Type: text/xml" -X POST  http://${USER}%40${DOMAIN}:${PASS}@${HOST}${PORT}/rest/adhoc/vhost-man@${DOMAIN}${APIKEY} -d "${REQUEST}"`

    if [[ ! ${response} = *"loaded successfully"* ]] ; then
        echo -e "Server returned error while updating   ${domain}   certificate:\n ${response}"
        fail_count=$((${fail_count}+1))
    else
        echo "Correctly updated ${domain} certificate"
    fi
done

exit ${fail_count}
----

NOTE: If you are not using wildcard certificate when you have to provide certificate for main domain as well as certificates for subdomains that mach all components that you want to expose (muc, pubsub, push, etc…)

